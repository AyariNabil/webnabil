{% extends 'base1.html.twig' %}

{% block title %}Style CV{% endblock %}





 {% block css%}
     <link rel="stylesheet" type="text/css" href="{{ asset('css/plugins.css') }}">
     <link rel="stylesheet" type="text/css" href="{{ asset('css/templete.css') }}">
     <link class="skin" rel="stylesheet" type="text/css" href="{{ asset('css/skin/skin-1.css') }}">
     <link rel="stylesheet" href="{{ asset('plugins/datepicker/css/bootstrap-datetimepicker.min.css') }}"/>
     <!-- Revolution Slider Css -->
     <link rel="stylesheet" type="text/css" href="{{ asset('plugins/revolution/revolution/css/layers.css') }}">
     <link rel="stylesheet" type="text/css" href="{{ asset('plugins/revolution/revolution/css/settings.css') }}">
     <link rel="stylesheet" type="text/css" href="{{ asset('plugins/revolution/revolution/css/navigation.css') }}">
     <link rel="stylesheet"  type="text/css" href="{{ asset('css/material-kit.css') }}" >
     <link rel="stylesheet" type="text/css" href="{{ asset('css/bootstrap.min.css') }}">

     <link rel="stylesheet" href="{{ asset('css/stylee2.css') }}">
     <link rel="stylesheet" href="{{ asset('css/stylee.css') }}">
     <link rel="stylesheet" href="{{ asset('css/testquiz.css') }}">



 {% endblock %}












{% block container %}
    <body>

    <div class="container">
        <div id="quiz">
            <h1><span>Q</span>uiz <i class="far fa-question-circle"></i></h1>

            <h2 id="question"></h2>

            <h3 id="score"></h3>

            <div class="choices">
                <button id="guess0" class="btn">
                    <p id="choice0"></p>
                </button>

                <button id="guess1" class="btn">
                    <p id="choice1"></p>
                </button>

                <button id="guess2" class="btn">
                    <p id="choice2"></p>
                </button>

            </div>

            <p id="progress"></p>

        </div>
    </div>
    </br>    </br>
    </br>
    </br>


    </body>



    <!-- SIGNATURE -->


    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
    <style rel="stylesheet">
        @import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300&display=swap');

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            text-align: center;
        }
        body {
            font-family: 'Josefin Sans', sans-serif;
            display: grid;
            align-items: center;
            justify-items: center;
            min-height: 100vh;
            background: #2f3542;
            color: #dfe4ea;

        h1 {
            margin-bottom: 3rem;
            text-transform: uppercase;
            font-size: 3rem;

        span, i {
            color: #ffa502;
        }
        }
        h3 {
            color: #ffa502;
            font-size: 1.5rem;
        }
        .container {
        .choices {
            display: flex;
            flex-wrap: wrap;
            margin: 3rem auto 3rem;
            width: 500px;

        button {
            flex: 1 0 45%;
            width: 200px;
            height: 80px;
            border-radius: 5px;
            cursor: pointer;
            border: none;
            margin: .4rem;
            outline: none;
            background: #dfe4ea;
            user-select: none;
            font-weight: 600;

        &:hover {
             background: #ffa502;
             transition: .5s;
         }
        &:active {
             transform: scale(.9);
             transition: transform .1s;
         }

        p {
            font-size: 1.3rem;
            margin: 0;
        }
        }
        }
        }
        #progress {
            font-size: 1.3rem;
            color: #ffa502;
        }
        }


        /* SIGNATURE */
        @import url('https://fonts.googleapis.com/css?family=Open+Sans:300&display=swap');

        .signature {
            display: flex;
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            background: rgba(51, 51, 51, 0.808);
            padding: .5rem .5rem;
            border-radius: 50px;
            box-shadow: 0 0 0px 3px rgb(9,251,186);
            color: rgb(9,251,186);
            font-family: 'Open Sans', sans-serif;
            font-size: .7rem;
            cursor: pointer;
        }
        .signature:hover {
            transform: translateX(3px);
            background: linear-gradient(90deg, rgba(51, 51, 51, 0.808) 30%, rgba(100, 100, 100, 0.808) 100% );
            transition: .3s ease;
            box-shadow: 0 0 0px 3px rgb(79, 250, 204);
            color: rgb(79, 250, 204);
        }
        .signature:focus {
            outline: none;
        }
        .signature .flag {
            height: 13px;
            width: 22px;
            background: linear-gradient(90deg, blue 36%, white 36%, white 67%, red 67%);
            box-shadow: inset 2px 2px 2px #222, 2px 2px 1px #222;
            margin-right: 6px;
            transform: translateY(3px);
        }
        .signature h3 {
            margin: 0;
            color: rgb(9,251,186);
            font-size: 1rem;
        }
        .signature i {
            font-size: 1.1rem;
            text-shadow: 2px 2px 1px #222;
            transform: translateY(2px);
        }
    </style>
    <script>
        class Question {
            constructor(text, choices, answer) {
                this.text = text;
                this.choices = choices;
                this.answer = answer;
            }
            isCorrectAnswer(choice) {
                return this.answer === choice;
            }
        }
        let questions = [
            {%  for q in quiz.questions   %}
                new Question("{{ q.question }}", ["{{ q.choix1 }}", "{{ q.choix2 }}", "{{ q.choix3 }}", "reduce()"], "{{ q.reponse }}"),
            {% endfor %}
        ];

        console.log(questions);

        class Quiz {
            constructor(questions) {
                this.score = 0;
                this.questions = questions;
                this.currentQuestionIndex = 0;
            }
            getCurrentQuestion() {
                return this.questions[this.currentQuestionIndex];
            }
            guess(answer) {
                if (this.getCurrentQuestion().isCorrectAnswer(answer)) {
                    this.score++;
                }
                this.currentQuestionIndex++;
            }
            hasEnded() {
                return this.currentQuestionIndex >= this.questions.length;
            }
        }

        // Regroup all  functions relative to the App Display
        const display = {
            elementShown: function(id, text) {
                let element = document.getElementById(id);
                element.innerHTML = text;
            },
            endQuiz: function() {
                let $resultat = 100*(quiz.score/quiz.questions.length);
                document.location.replace("/endQuiz/{{ quiz.id }}/"+$resultat) ;
            },
            question: function() {
                this.elementShown("question", quiz.getCurrentQuestion().text);
            },
            choices: function() {
                let choices = quiz.getCurrentQuestion().choices;

                guessHandler = (id, guess) => {
                    document.getElementById(id).onclick = function() {
                        quiz.guess(guess);
                        quizApp();
                    }
                }
                // display choices and handle guess
                for(let i = 0; i < choices.length; i++) {
                    this.elementShown("choice" + i, choices[i]);
                    guessHandler("guess" + i, choices[i]);
                }
            },
            progress: function() {
                let currentQuestionNumber = quiz.currentQuestionIndex + 1;
                this.elementShown("progress", "Question " + currentQuestionNumber + " sur " + quiz.questions.length);
            },
        };

        // Game logic
        quizApp = () => {
            if (quiz.hasEnded()) {
                display.endQuiz();
            } else {
                display.question();
                display.choices();
                display.progress();
            }
        }
        // Create Quiz
        let quiz = new Quiz(questions);
        quizApp();

        console.log(quiz);


    </script>
{% endblock %}